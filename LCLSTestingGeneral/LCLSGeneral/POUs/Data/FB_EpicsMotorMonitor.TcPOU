<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_EpicsMotorMonitor" Id="{c6bf2af8-e9b0-4ebb-b06e-d35a94600f72}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    EPICS Motor Record Monitoring tool

    Requirements:

    * Requires an existing IOC with an EPICS motor record.
    * Requires a pytmc "link" pragma to specify the motor record prefix.

    What information is included?

    * The validity of the source data (as determined by alarm severity)
    * Readback value (scaled encoder position in ``fPosition``)
    * Motion status (moving or not, ``bIsMoving``)
    * Homed status, limit status, and others (via ``stMSTA``, see
      ``ST_EpicsMotorMSTA``).

    Example:

        {attribute 'pytmc' := '
            pv: @(PREFIX):Internal:Mon
            link: MOTOR:PV:NAME
        '}
        fbMotorMonitor : FB_EpicsMotorMonitor;

        fbMotorMonitor(bEnable:=TRUE);
        IF fbMotorMonitor.bValid THEN
            fbMotorMonitor.fPosition;
            fbMotorMonitor.bIsMoving;
            fbMotorMonitor.stMSTA.bHomed;
        END_IF
    
    Above, ``MOTOR:PV:NAME`` should refer to an EPICS motor record.
    That is, ``caget MOTOR:PV:NAME.RTYP`` should return "motor".

    How does this work?

    pytmc offers the ability to push EPICS process variable data into PLCs by
    way of link pragmas.  These link pragmas create additional supporting EPICS
    records that monitor PVs from any IOC on the controls network. In this case,
    the PLC IOC will monitor vital motor record information and let your PLC
    project know of its status.

    Note that not all motor records may be created equally.  Some of the status
    fields may not be consistent.  Be sure to check how your motor works and
    what fields are worth paying attention to when using this.

*)
FUNCTION_BLOCK FB_EpicsMotorMonitor
VAR_INPUT
    bEnable : BOOL := TRUE;
END_VAR
VAR_OUTPUT
    bIsMoving : BOOL;
    fPosition : LREAL;
    nMSTA_Raw : UINT;
    stMSTA : ST_EpicsMotorMSTA;
    bValid : BOOL;
END_VAR
VAR
    {attribute 'pytmc' := '
        pv: RBV_
        link: .RBV
    '}
    fbRBVCheck : FB_LREALFromEPICS;

    {attribute 'pytmc' := '
        pv: Dmov_
        link: .DMOV
    '}
    fbMovingCheck : FB_LREALFromEPICS;

    {attribute 'pytmc' := '
        pv: Msta_
        link: .MSTA
    '}
    fbMotorStatusCheck : FB_LREALFromEPICS;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bEnable THEN
    bValid := FALSE;
    RETURN;
END_IF

fbRBVCheck();
fbMovingCheck();
fbMotorStatusCheck();
bValid := (
    fbRBVCheck.bValid AND
    fbMovingCheck.bValid AND
    fbMotorStatusCheck.bValid
);

(* Moving status is DMOV; this comes in as a floating point value
     DMOV = 0 -> moving
     DMOV = 1 -> done moving, or not moving
*)
bIsMoving := ABS(fbMovingCheck.fValue) < 1e-5;
fPosition := fbRBVCheck.fValue;

nMSTA_Raw := LREAL_TO_UINT(fbMotorStatusCheck.fValue);
stMSTA.bPositiveDirection := nMSTA_Raw.0;
stMSTA.bDone := nMSTA_Raw.1;
stMSTA.bPlusLimitSwitch := nMSTA_Raw.2;
stMSTA.bHomeLimitSwitch := nMSTA_Raw.3;
stMSTA.bUnused0 := nMSTA_Raw.4;
stMSTA.bClosedLoop := nMSTA_Raw.5;
stMSTA.bSlipStall := nMSTA_Raw.6;
stMSTA.bHome := nMSTA_Raw.7;
stMSTA.bEncoderPresent := nMSTA_Raw.8;
stMSTA.bHardwareProblem := nMSTA_Raw.9;
stMSTA.bMoving := nMSTA_Raw.10;
stMSTA.bGainSupport := nMSTA_Raw.11;
stMSTA.bCommError := nMSTA_Raw.12;
stMSTA.bMinusLimitSwitch := nMSTA_Raw.13;
stMSTA.bHomed := nMSTA_Raw.14;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>
